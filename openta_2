import numpy as np
from itertools import product
from time import time
import matplotlib.pyplot as plt
import random
import os 

def plot_input():
    current_directory = os.getcwd()
    print("Current Directory:", current_directory)
    data = np.loadtxt(os.path.join("hw2", "training_set.csv"), delimiter=',')
    input = data[:, :2]
    target = data[:, -1]
    print(f"The shape of the data is {data.shape}")

    validation_data = np.loadtxt(os.path.join("hw2", "validation_set.csv"), delimiter=',')
    print(f"The shape of the validation data is {validation_data.shape}")


    fig, ax = plt.subplots(1,2,figsize=(5,5))
    for color, num in zip("kr", (-1,1)):

        mask_training = np.where(target==num)[0]
        ax[0].scatter(input[mask_training,0],input[mask_training,1], c=color, alpha=0.5, s=2)
        
        mask_val = np.where(validation_data[:,-1]==num)[0]
        ax[1].scatter(validation_data[mask_val,0],validation_data[mask_val,1], c=color, alpha=0.5, s=2)

    
    print(f"The mean of the training input is {np.mean(input, axis=0)}")
    print(f"The mean of the validaiton input is {np.mean(validation_data[:,:2], axis=0)}")
    plt.show()


def initialize_network(size: tuple=(1,1)):
    """
    Initializes the network with zero threshold/biases and normally distributed weights. 
    
    Returns the weights and thresholds.  
    """
    M1, M2 = size

    w1 = np.random.normal(loc=0, scale=0.63, size=(M1, 2))
    w2 = np.random.normal(loc=0, scale=0.63, size=(M2, M1))
    w3 = np.random.normal(loc=0, scale=0.63, size=(M2))

    theta1 = np.zeros(M1)
    theta2 = np.zeros(M2)
    theta3 = 0

    W = (w1,w2,w3)
    theta = (theta1, theta2, theta3)
    return W, theta

def get_output(W, theta, x_mu):
    """
    Feedforward passes of the input x to calculate the output, O. 
    """
    b1 = theta[0] + W[0] @ x_mu.T
    V1 = np.tanh(b1)
    
    b2 = theta[1] + W[1] @ V1.T
    V2 = np.tanh(b2)

    b3 = theta[2] + W[2] @ V2.T
    O = np.tanh(b3)
    return O


def train_network(input, target, W, theta):
    
    delta1 =  
    delta2




def run():

    pass




if __name__ == "__main__":
    
    plot_input()
    
